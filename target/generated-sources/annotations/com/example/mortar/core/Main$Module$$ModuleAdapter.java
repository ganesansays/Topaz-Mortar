// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.core;


import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class Main$Module$$ModuleAdapter extends ModuleAdapter<com.example.mortar.core.Main.Module> {
  private static final String[] INJECTS = { "members/com.example.mortar.core.MainView", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.example.mortar.android.ActionBarModule.class, };

  public Main$Module$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public com.example.mortar.core.Main.Module newModule() {
    return new com.example.mortar.core.Main.Module();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("flow.Flow", new ProvideFlowProvidesAdapter(module));
  }

  /**
   * A {@code Binder<flow.Flow>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code flow.Flow} and its
   * dependencies.
   * 
   * Being a {@code Provider<flow.Flow>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFlowProvidesAdapter extends Binding<flow.Flow>
      implements Provider<flow.Flow> {
    private final com.example.mortar.core.Main.Module module;
    private Binding<com.example.mortar.core.Main.Presenter> presenter;

    public ProvideFlowProvidesAdapter(com.example.mortar.core.Main.Module module) {
      super("flow.Flow", null, NOT_SINGLETON, "com.example.mortar.core.Main.Module.provideFlow()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      presenter = (Binding<com.example.mortar.core.Main.Presenter>) linker.requestBinding("com.example.mortar.core.Main$Presenter", com.example.mortar.core.Main.Module.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(presenter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<flow.Flow>}.
     */
    @Override
    public flow.Flow get() {
      return module.provideFlow(presenter.get());
    }
  }
}
