// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.core;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<Main.Presenter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code Main.Presenter} and its
 * dependencies.
 * 
 * Being a {@code Provider<Main.Presenter>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<Main.Presenter>} and handling injection
 * of annotated fields.
 */
public final class Main$Presenter$$InjectAdapter extends Binding<Main.Presenter>
    implements Provider<Main.Presenter>, MembersInjector<Main.Presenter> {
  private Binding<flow.Parcer<Object>> flowParcer;
  private Binding<com.example.mortar.android.ActionBarOwner> actionBarOwner;
  private Binding<com.example.mortar.util.FlowOwner> supertype;

  public Main$Presenter$$InjectAdapter() {
    super("com.example.mortar.core.Main$Presenter", "members/com.example.mortar.core.Main$Presenter", IS_SINGLETON, Main.Presenter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    flowParcer = (Binding<flow.Parcer<Object>>) linker.requestBinding("flow.Parcer<java.lang.Object>", Main.Presenter.class, getClass().getClassLoader());
    actionBarOwner = (Binding<com.example.mortar.android.ActionBarOwner>) linker.requestBinding("com.example.mortar.android.ActionBarOwner", Main.Presenter.class, getClass().getClassLoader());
    supertype = (Binding<com.example.mortar.util.FlowOwner>) linker.requestBinding("members/com.example.mortar.util.FlowOwner", Main.Presenter.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(flowParcer);
    getBindings.add(actionBarOwner);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Main.Presenter>}.
   */
  @Override
  public Main.Presenter get() {
    Main.Presenter result = new Main.Presenter(flowParcer.get(), actionBarOwner.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<Main.Presenter>}.
   */
  @Override
  public void injectMembers(Main.Presenter object) {
    supertype.injectMembers(object);
  }
}
