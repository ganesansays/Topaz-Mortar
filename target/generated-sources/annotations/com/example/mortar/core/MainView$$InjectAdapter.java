// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.core;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binder<MainView>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code MainView} and its
 * dependencies.
 * 
 * Being a {@code Provider<MainView>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<MainView>} and handling injection
 * of annotated fields.
 */
public final class MainView$$InjectAdapter extends Binding<MainView>
    implements MembersInjector<MainView> {
  private Binding<com.example.mortar.core.Main.Presenter> presenter;

  public MainView$$InjectAdapter() {
    super(null, "members/com.example.mortar.core.MainView", NOT_SINGLETON, MainView.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    presenter = (Binding<com.example.mortar.core.Main.Presenter>) linker.requestBinding("com.example.mortar.core.Main$Presenter", MainView.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(presenter);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<MainView>}.
   */
  @Override
  public void injectMembers(MainView object) {
    object.presenter = presenter.get();
  }
}
