// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.model;


import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class Leads$Module$$ModuleAdapter extends ModuleAdapter<com.example.mortar.model.Leads.Module> {
  private static final String[] INJECTS = { "members/com.example.mortar.model.Leads", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public Leads$Module$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public com.example.mortar.model.Leads.Module newModule() {
    return new com.example.mortar.model.Leads.Module();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("java.util.concurrent.Executor", new ProvideMessagePollThreadProvidesAdapter(module));
  }

  /**
   * A {@code Binder<java.util.concurrent.Executor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<java.util.concurrent.Executor>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMessagePollThreadProvidesAdapter extends Binding<java.util.concurrent.Executor>
      implements Provider<java.util.concurrent.Executor> {
    private final com.example.mortar.model.Leads.Module module;

    public ProvideMessagePollThreadProvidesAdapter(com.example.mortar.model.Leads.Module module) {
      super("java.util.concurrent.Executor", null, IS_SINGLETON, "com.example.mortar.model.Leads.Module.provideMessagePollThread()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.concurrent.Executor>}.
     */
    @Override
    public java.util.concurrent.Executor get() {
      return module.provideMessagePollThread();
    }
  }
}
