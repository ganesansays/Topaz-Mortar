// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.screen;


import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ChatScreen$Module$$ModuleAdapter extends ModuleAdapter<com.example.mortar.screen.ChatScreen.Module> {
  private static final String[] INJECTS = { "members/com.example.mortar.view.ChatView", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ChatScreen$Module$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.example.mortar.model.Chat", new ProvideConversationProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.example.mortar.model.Chat>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.example.mortar.model.Chat} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.example.mortar.model.Chat>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideConversationProvidesAdapter extends Binding<com.example.mortar.model.Chat>
      implements Provider<com.example.mortar.model.Chat> {
    private final com.example.mortar.screen.ChatScreen.Module module;
    private Binding<com.example.mortar.model.Chats> chats;

    public ProvideConversationProvidesAdapter(com.example.mortar.screen.ChatScreen.Module module) {
      super("com.example.mortar.model.Chat", null, NOT_SINGLETON, "com.example.mortar.screen.ChatScreen.Module.provideConversation()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      chats = (Binding<com.example.mortar.model.Chats>) linker.requestBinding("com.example.mortar.model.Chats", com.example.mortar.screen.ChatScreen.Module.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(chats);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.mortar.model.Chat>}.
     */
    @Override
    public com.example.mortar.model.Chat get() {
      return module.provideConversation(chats.get());
    }
  }
}
