// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.screen;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<MessageScreen.Presenter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code MessageScreen.Presenter} and its
 * dependencies.
 * 
 * Being a {@code Provider<MessageScreen.Presenter>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<MessageScreen.Presenter>} and handling injection
 * of annotated fields.
 */
public final class MessageScreen$Presenter$$InjectAdapter extends Binding<MessageScreen.Presenter>
    implements Provider<MessageScreen.Presenter>, MembersInjector<MessageScreen.Presenter> {
  private Binding<flow.Flow> flow;
  private Binding<rx.Observable<com.example.mortar.model.Message>> messageSource;
  private Binding<mortar.ViewPresenter> supertype;

  public MessageScreen$Presenter$$InjectAdapter() {
    super("com.example.mortar.screen.MessageScreen$Presenter", "members/com.example.mortar.screen.MessageScreen$Presenter", IS_SINGLETON, MessageScreen.Presenter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    flow = (Binding<flow.Flow>) linker.requestBinding("flow.Flow", MessageScreen.Presenter.class, getClass().getClassLoader());
    messageSource = (Binding<rx.Observable<com.example.mortar.model.Message>>) linker.requestBinding("rx.Observable<com.example.mortar.model.Message>", MessageScreen.Presenter.class, getClass().getClassLoader());
    supertype = (Binding<mortar.ViewPresenter>) linker.requestBinding("members/mortar.ViewPresenter", MessageScreen.Presenter.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(flow);
    getBindings.add(messageSource);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<MessageScreen.Presenter>}.
   */
  @Override
  public MessageScreen.Presenter get() {
    MessageScreen.Presenter result = new MessageScreen.Presenter(flow.get(), messageSource.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<MessageScreen.Presenter>}.
   */
  @Override
  public void injectMembers(MessageScreen.Presenter object) {
    supertype.injectMembers(object);
  }
}
