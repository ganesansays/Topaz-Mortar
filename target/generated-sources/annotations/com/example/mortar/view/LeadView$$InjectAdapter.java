// Code generated by dagger-compiler.  Do not edit.
package com.example.mortar.view;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binder<LeadView>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code LeadView} and its
 * dependencies.
 * 
 * Being a {@code Provider<LeadView>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<LeadView>} and handling injection
 * of annotated fields.
 */
public final class LeadView$$InjectAdapter extends Binding<LeadView>
    implements MembersInjector<LeadView> {
  private Binding<com.example.mortar.screen.LeadScreen.Presenter> presenter;

  public LeadView$$InjectAdapter() {
    super(null, "members/com.example.mortar.view.LeadView", NOT_SINGLETON, LeadView.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    presenter = (Binding<com.example.mortar.screen.LeadScreen.Presenter>) linker.requestBinding("com.example.mortar.screen.LeadScreen$Presenter", LeadView.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(presenter);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<LeadView>}.
   */
  @Override
  public void injectMembers(LeadView object) {
    object.presenter = presenter.get();
  }
}
